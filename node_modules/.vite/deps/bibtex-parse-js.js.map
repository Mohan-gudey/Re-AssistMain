{
  "version": 3,
  "sources": ["../../bibtex-parse-js/bibtexParse.js"],
  "sourcesContent": ["/* start bibtexParse 0.0.24 */\n\n//Original work by Henrik Muehe (c) 2010\n//\n//CommonJS port by Mikola Lysenko 2013\n//\n//Port to Browser lib by ORCID / RCPETERS\n//\n//Issues:\n//no comment handling within strings\n//no string concatenation\n//no variable values yet\n//Grammar implemented here:\n//bibtex -> (string | preamble | comment | entry)*;\n//string -> '@STRING' '{' key_equals_value '}';\n//preamble -> '@PREAMBLE' '{' value '}';\n//comment -> '@COMMENT' '{' value '}';\n//entry -> '@' key '{' key ',' key_value_list '}';\n//key_value_list -> key_equals_value (',' key_equals_value)*;\n//key_equals_value -> key '=' value;\n//value -> value_quotes | value_braces | key;\n//value_quotes -> '\"' .*? '\"'; // not quite\n//value_braces -> '{' .*? '\"'; // not quite\n(function(exports) {\n\n    function BibtexParser() {\n\n        this.months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"];\n        this.notKey = [',','{','}',' ','='];\n        this.pos = 0;\n        this.input = \"\";\n        this.entries = new Array();\n\n        this.currentEntry = \"\";\n\n        this.setInput = function(t) {\n            this.input = t;\n        };\n\n        this.getEntries = function() {\n            return this.entries;\n        };\n\n        this.isWhitespace = function(s) {\n            return (s == ' ' || s == '\\r' || s == '\\t' || s == '\\n');\n        };\n\n        this.match = function(s, canCommentOut) {\n            if (canCommentOut == undefined || canCommentOut == null)\n                canCommentOut = true;\n            this.skipWhitespace(canCommentOut);\n            if (this.input.substring(this.pos, this.pos + s.length) == s) {\n                this.pos += s.length;\n            } else {\n                throw \"Token mismatch, expected \" + s + \", found \"\n                        + this.input.substring(this.pos);\n            };\n            this.skipWhitespace(canCommentOut);\n        };\n\n        this.tryMatch = function(s, canCommentOut) {\n            if (canCommentOut == undefined || canCommentOut == null)\n                canCommentOut = true;\n            this.skipWhitespace(canCommentOut);\n            if (this.input.substring(this.pos, this.pos + s.length) == s) {\n                return true;\n            } else {\n                return false;\n            };\n            this.skipWhitespace(canCommentOut);\n        };\n\n        /* when search for a match all text can be ignored, not just white space */\n        this.matchAt = function() {\n            while (this.input.length > this.pos && this.input[this.pos] != '@') {\n                this.pos++;\n            };\n\n            if (this.input[this.pos] == '@') {\n                return true;\n            };\n            return false;\n        };\n\n        this.skipWhitespace = function(canCommentOut) {\n            while (this.isWhitespace(this.input[this.pos])) {\n                this.pos++;\n            };\n            if (this.input[this.pos] == \"%\" && canCommentOut == true) {\n                while (this.input[this.pos] != \"\\n\") {\n                    this.pos++;\n                };\n                this.skipWhitespace(canCommentOut);\n            };\n        };\n\n        this.value_braces = function() {\n            var bracecount = 0;\n            this.match(\"{\", false);\n            var start = this.pos;\n            var escaped = false;\n            while (true) {\n                if (!escaped) {\n                    if (this.input[this.pos] == '}') {\n                        if (bracecount > 0) {\n                            bracecount--;\n                        } else {\n                            var end = this.pos;\n                            this.match(\"}\", false);\n                            return this.input.substring(start, end);\n                        };\n                    } else if (this.input[this.pos] == '{') {\n                        bracecount++;\n                    } else if (this.pos >= this.input.length - 1) {\n                        throw \"Unterminated value\";\n                    };\n                };\n                if (this.input[this.pos] == '\\\\' && escaped == false)\n                    escaped = true;\n                else\n                    escaped = false;\n                this.pos++;\n            };\n        };\n\n        this.value_comment = function() {\n            var str = '';\n            var brcktCnt = 0;\n            while (!(this.tryMatch(\"}\", false) && brcktCnt == 0)) {\n                str = str + this.input[this.pos];\n                if (this.input[this.pos] == '{')\n                    brcktCnt++;\n                if (this.input[this.pos] == '}')\n                    brcktCnt--;\n                if (this.pos >= this.input.length - 1) {\n                    throw \"Unterminated value:\" + this.input.substring(start);\n                };\n                this.pos++;\n            };\n            return str;\n        };\n\n        this.value_quotes = function() {\n            this.match('\"', false);\n            var start = this.pos;\n            var escaped = false;\n            while (true) {\n                if (!escaped) {\n                    if (this.input[this.pos] == '\"') {\n                        var end = this.pos;\n                        this.match('\"', false);\n                        return this.input.substring(start, end);\n                    } else if (this.pos >= this.input.length - 1) {\n                        throw \"Unterminated value:\" + this.input.substring(start);\n                    };\n                }\n                if (this.input[this.pos] == '\\\\' && escaped == false)\n                    escaped = true;\n                else\n                    escaped = false;\n                this.pos++;\n            };\n        };\n\n        this.single_value = function() {\n            var start = this.pos;\n            if (this.tryMatch(\"{\")) {\n                return this.value_braces();\n            } else if (this.tryMatch('\"')) {\n                return this.value_quotes();\n            } else {\n                var k = this.key();\n                if (k.match(\"^[0-9]+$\"))\n                    return k;\n                else if (this.months.indexOf(k.toLowerCase()) >= 0)\n                    return k.toLowerCase();\n                else\n                    throw \"Value expected:\" + this.input.substring(start) + ' for key: ' + k;\n\n            };\n        };\n\n        this.value = function() {\n            var values = [];\n            values.push(this.single_value());\n            while (this.tryMatch(\"#\")) {\n                this.match(\"#\");\n                values.push(this.single_value());\n            };\n            return values.join(\"\");\n        };\n\n        this.key = function(optional) {\n            var start = this.pos;\n            while (true) {\n                if (this.pos >= this.input.length) {\n                    throw \"Runaway key\";\n                };\n                                // а-яА-Я is Cyrillic\n                //console.log(this.input[this.pos]);\n                if (this.notKey.indexOf(this.input[this.pos]) >= 0) {\n                    if (optional && this.input[this.pos] != ',') {\n                        this.pos = start;\n                        return null;\n                    };\n                    return this.input.substring(start, this.pos);\n                } else {\n                    this.pos++;\n\n                };\n            };\n        };\n\n        this.key_equals_value = function() {\n            var key = this.key();\n            if (this.tryMatch(\"=\")) {\n                this.match(\"=\");\n                var val = this.value();\n                key = key.trim()\n                return [ key, val ];\n            } else {\n                throw \"... = value expected, equals sign missing:\"\n                        + this.input.substring(this.pos);\n            };\n        };\n\n        this.key_value_list = function() {\n            var kv = this.key_equals_value();\n            this.currentEntry['entryTags'] = {};\n            this.currentEntry['entryTags'][kv[0]] = kv[1];\n            while (this.tryMatch(\",\")) {\n                this.match(\",\");\n                // fixes problems with commas at the end of a list\n                if (this.tryMatch(\"}\")) {\n                    break;\n                }\n                ;\n                kv = this.key_equals_value();\n                this.currentEntry['entryTags'][kv[0]] = kv[1];\n            };\n        };\n\n        this.entry_body = function(d) {\n            this.currentEntry = {};\n            this.currentEntry['citationKey'] = this.key(true);\n            this.currentEntry['entryType'] = d.substring(1);\n            if (this.currentEntry['citationKey'] != null) {\n                this.match(\",\");\n            }\n            this.key_value_list();\n            this.entries.push(this.currentEntry);\n        };\n\n        this.directive = function() {\n            this.match(\"@\");\n            return \"@\" + this.key();\n        };\n\n        this.preamble = function() {\n            this.currentEntry = {};\n            this.currentEntry['entryType'] = 'PREAMBLE';\n            this.currentEntry['entry'] = this.value_comment();\n            this.entries.push(this.currentEntry);\n        };\n\n        this.comment = function() {\n            this.currentEntry = {};\n            this.currentEntry['entryType'] = 'COMMENT';\n            this.currentEntry['entry'] = this.value_comment();\n            this.entries.push(this.currentEntry);\n        };\n\n        this.entry = function(d) {\n            this.entry_body(d);\n        };\n\n        this.alernativeCitationKey = function () {\n            this.entries.forEach(function (entry) {\n                if (!entry.citationKey && entry.entryTags) {\n                    entry.citationKey = '';\n                    if (entry.entryTags.author) {\n                        entry.citationKey += entry.entryTags.author.split(',')[0] += ', ';\n                    }\n                    entry.citationKey += entry.entryTags.year;\n                }\n            });\n        }\n\n        this.bibtex = function() {\n            while (this.matchAt()) {\n                var d = this.directive();\n                this.match(\"{\");\n                if (d.toUpperCase() == \"@STRING\") {\n                    this.string();\n                } else if (d.toUpperCase() == \"@PREAMBLE\") {\n                    this.preamble();\n                } else if (d.toUpperCase() == \"@COMMENT\") {\n                    this.comment();\n                } else {\n                    this.entry(d);\n                }\n                this.match(\"}\");\n            };\n\n            this.alernativeCitationKey();\n        };\n    };\n\n    exports.toJSON = function(bibtex) {\n        var b = new BibtexParser();\n        b.setInput(bibtex);\n        b.bibtex();\n        return b.entries;\n    };\n\n    /* added during hackathon don't hate on me */\n    exports.toBibtex = function(json) {\n        var out = '';\n        for ( var i in json) {\n            out += \"@\" + json[i].entryType;\n            out += '{';\n            if (json[i].citationKey)\n                out += json[i].citationKey + ', ';\n            if (json[i].entry)\n                out += json[i].entry ;\n            if (json[i].entryTags) {\n                var tags = '';\n                for (var jdx in json[i].entryTags) {\n                    if (tags.length != 0)\n                        tags += ', ';\n                    tags += jdx + '= {' + json[i].entryTags[jdx] + '}';\n                }\n                out += tags;\n            }\n            out += '}\\n\\n';\n        }\n        return out;\n\n    };\n\n})(typeof exports === 'undefined' ? this['bibtexParse'] = {} : exports);\n\n/* end bibtexParse */\n"],
  "mappings": ";;;;;AAAA;AAAA;AAuBA,KAAC,SAASA,UAAS;AAEf,eAAS,eAAe;AAEpB,aAAK,SAAS,CAAC,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AACjG,aAAK,SAAS,CAAC,KAAI,KAAI,KAAI,KAAI,GAAG;AAClC,aAAK,MAAM;AACX,aAAK,QAAQ;AACb,aAAK,UAAU,IAAI,MAAM;AAEzB,aAAK,eAAe;AAEpB,aAAK,WAAW,SAAS,GAAG;AACxB,eAAK,QAAQ;AAAA,QACjB;AAEA,aAAK,aAAa,WAAW;AACzB,iBAAO,KAAK;AAAA,QAChB;AAEA,aAAK,eAAe,SAAS,GAAG;AAC5B,iBAAQ,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAQ,KAAK;AAAA,QACvD;AAEA,aAAK,QAAQ,SAAS,GAAG,eAAe;AACpC,cAAI,iBAAiB,UAAa,iBAAiB;AAC/C,4BAAgB;AACpB,eAAK,eAAe,aAAa;AACjC,cAAI,KAAK,MAAM,UAAU,KAAK,KAAK,KAAK,MAAM,EAAE,MAAM,KAAK,GAAG;AAC1D,iBAAK,OAAO,EAAE;AAAA,UAClB,OAAO;AACH,kBAAM,8BAA8B,IAAI,aAC9B,KAAK,MAAM,UAAU,KAAK,GAAG;AAAA,UAC3C;AAAC;AACD,eAAK,eAAe,aAAa;AAAA,QACrC;AAEA,aAAK,WAAW,SAAS,GAAG,eAAe;AACvC,cAAI,iBAAiB,UAAa,iBAAiB;AAC/C,4BAAgB;AACpB,eAAK,eAAe,aAAa;AACjC,cAAI,KAAK,MAAM,UAAU,KAAK,KAAK,KAAK,MAAM,EAAE,MAAM,KAAK,GAAG;AAC1D,mBAAO;AAAA,UACX,OAAO;AACH,mBAAO;AAAA,UACX;AAAC;AACD,eAAK,eAAe,aAAa;AAAA,QACrC;AAGA,aAAK,UAAU,WAAW;AACtB,iBAAO,KAAK,MAAM,SAAS,KAAK,OAAO,KAAK,MAAM,KAAK,GAAG,KAAK,KAAK;AAChE,iBAAK;AAAA,UACT;AAAC;AAED,cAAI,KAAK,MAAM,KAAK,GAAG,KAAK,KAAK;AAC7B,mBAAO;AAAA,UACX;AAAC;AACD,iBAAO;AAAA,QACX;AAEA,aAAK,iBAAiB,SAAS,eAAe;AAC1C,iBAAO,KAAK,aAAa,KAAK,MAAM,KAAK,GAAG,CAAC,GAAG;AAC5C,iBAAK;AAAA,UACT;AAAC;AACD,cAAI,KAAK,MAAM,KAAK,GAAG,KAAK,OAAO,iBAAiB,MAAM;AACtD,mBAAO,KAAK,MAAM,KAAK,GAAG,KAAK,MAAM;AACjC,mBAAK;AAAA,YACT;AAAC;AACD,iBAAK,eAAe,aAAa;AAAA,UACrC;AAAC;AAAA,QACL;AAEA,aAAK,eAAe,WAAW;AAC3B,cAAI,aAAa;AACjB,eAAK,MAAM,KAAK,KAAK;AACrB,cAAIC,SAAQ,KAAK;AACjB,cAAI,UAAU;AACd,iBAAO,MAAM;AACT,gBAAI,CAAC,SAAS;AACV,kBAAI,KAAK,MAAM,KAAK,GAAG,KAAK,KAAK;AAC7B,oBAAI,aAAa,GAAG;AAChB;AAAA,gBACJ,OAAO;AACH,sBAAI,MAAM,KAAK;AACf,uBAAK,MAAM,KAAK,KAAK;AACrB,yBAAO,KAAK,MAAM,UAAUA,QAAO,GAAG;AAAA,gBAC1C;AAAC;AAAA,cACL,WAAW,KAAK,MAAM,KAAK,GAAG,KAAK,KAAK;AACpC;AAAA,cACJ,WAAW,KAAK,OAAO,KAAK,MAAM,SAAS,GAAG;AAC1C,sBAAM;AAAA,cACV;AAAC;AAAA,YACL;AAAC;AACD,gBAAI,KAAK,MAAM,KAAK,GAAG,KAAK,QAAQ,WAAW;AAC3C,wBAAU;AAAA;AAEV,wBAAU;AACd,iBAAK;AAAA,UACT;AAAC;AAAA,QACL;AAEA,aAAK,gBAAgB,WAAW;AAC5B,cAAI,MAAM;AACV,cAAI,WAAW;AACf,iBAAO,EAAE,KAAK,SAAS,KAAK,KAAK,KAAK,YAAY,IAAI;AAClD,kBAAM,MAAM,KAAK,MAAM,KAAK,GAAG;AAC/B,gBAAI,KAAK,MAAM,KAAK,GAAG,KAAK;AACxB;AACJ,gBAAI,KAAK,MAAM,KAAK,GAAG,KAAK;AACxB;AACJ,gBAAI,KAAK,OAAO,KAAK,MAAM,SAAS,GAAG;AACnC,oBAAM,wBAAwB,KAAK,MAAM,UAAU,KAAK;AAAA,YAC5D;AAAC;AACD,iBAAK;AAAA,UACT;AAAC;AACD,iBAAO;AAAA,QACX;AAEA,aAAK,eAAe,WAAW;AAC3B,eAAK,MAAM,KAAK,KAAK;AACrB,cAAIA,SAAQ,KAAK;AACjB,cAAI,UAAU;AACd,iBAAO,MAAM;AACT,gBAAI,CAAC,SAAS;AACV,kBAAI,KAAK,MAAM,KAAK,GAAG,KAAK,KAAK;AAC7B,oBAAI,MAAM,KAAK;AACf,qBAAK,MAAM,KAAK,KAAK;AACrB,uBAAO,KAAK,MAAM,UAAUA,QAAO,GAAG;AAAA,cAC1C,WAAW,KAAK,OAAO,KAAK,MAAM,SAAS,GAAG;AAC1C,sBAAM,wBAAwB,KAAK,MAAM,UAAUA,MAAK;AAAA,cAC5D;AAAC;AAAA,YACL;AACA,gBAAI,KAAK,MAAM,KAAK,GAAG,KAAK,QAAQ,WAAW;AAC3C,wBAAU;AAAA;AAEV,wBAAU;AACd,iBAAK;AAAA,UACT;AAAC;AAAA,QACL;AAEA,aAAK,eAAe,WAAW;AAC3B,cAAIA,SAAQ,KAAK;AACjB,cAAI,KAAK,SAAS,GAAG,GAAG;AACpB,mBAAO,KAAK,aAAa;AAAA,UAC7B,WAAW,KAAK,SAAS,GAAG,GAAG;AAC3B,mBAAO,KAAK,aAAa;AAAA,UAC7B,OAAO;AACH,gBAAI,IAAI,KAAK,IAAI;AACjB,gBAAI,EAAE,MAAM,UAAU;AAClB,qBAAO;AAAA,qBACF,KAAK,OAAO,QAAQ,EAAE,YAAY,CAAC,KAAK;AAC7C,qBAAO,EAAE,YAAY;AAAA;AAErB,oBAAM,oBAAoB,KAAK,MAAM,UAAUA,MAAK,IAAI,eAAe;AAAA,UAE/E;AAAC;AAAA,QACL;AAEA,aAAK,QAAQ,WAAW;AACpB,cAAI,SAAS,CAAC;AACd,iBAAO,KAAK,KAAK,aAAa,CAAC;AAC/B,iBAAO,KAAK,SAAS,GAAG,GAAG;AACvB,iBAAK,MAAM,GAAG;AACd,mBAAO,KAAK,KAAK,aAAa,CAAC;AAAA,UACnC;AAAC;AACD,iBAAO,OAAO,KAAK,EAAE;AAAA,QACzB;AAEA,aAAK,MAAM,SAAS,UAAU;AAC1B,cAAIA,SAAQ,KAAK;AACjB,iBAAO,MAAM;AACT,gBAAI,KAAK,OAAO,KAAK,MAAM,QAAQ;AAC/B,oBAAM;AAAA,YACV;AAAC;AAGD,gBAAI,KAAK,OAAO,QAAQ,KAAK,MAAM,KAAK,GAAG,CAAC,KAAK,GAAG;AAChD,kBAAI,YAAY,KAAK,MAAM,KAAK,GAAG,KAAK,KAAK;AACzC,qBAAK,MAAMA;AACX,uBAAO;AAAA,cACX;AAAC;AACD,qBAAO,KAAK,MAAM,UAAUA,QAAO,KAAK,GAAG;AAAA,YAC/C,OAAO;AACH,mBAAK;AAAA,YAET;AAAC;AAAA,UACL;AAAC;AAAA,QACL;AAEA,aAAK,mBAAmB,WAAW;AAC/B,cAAI,MAAM,KAAK,IAAI;AACnB,cAAI,KAAK,SAAS,GAAG,GAAG;AACpB,iBAAK,MAAM,GAAG;AACd,gBAAI,MAAM,KAAK,MAAM;AACrB,kBAAM,IAAI,KAAK;AACf,mBAAO,CAAE,KAAK,GAAI;AAAA,UACtB,OAAO;AACH,kBAAM,+CACI,KAAK,MAAM,UAAU,KAAK,GAAG;AAAA,UAC3C;AAAC;AAAA,QACL;AAEA,aAAK,iBAAiB,WAAW;AAC7B,cAAI,KAAK,KAAK,iBAAiB;AAC/B,eAAK,aAAa,WAAW,IAAI,CAAC;AAClC,eAAK,aAAa,WAAW,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;AAC5C,iBAAO,KAAK,SAAS,GAAG,GAAG;AACvB,iBAAK,MAAM,GAAG;AAEd,gBAAI,KAAK,SAAS,GAAG,GAAG;AACpB;AAAA,YACJ;AACA;AACA,iBAAK,KAAK,iBAAiB;AAC3B,iBAAK,aAAa,WAAW,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;AAAA,UAChD;AAAC;AAAA,QACL;AAEA,aAAK,aAAa,SAAS,GAAG;AAC1B,eAAK,eAAe,CAAC;AACrB,eAAK,aAAa,aAAa,IAAI,KAAK,IAAI,IAAI;AAChD,eAAK,aAAa,WAAW,IAAI,EAAE,UAAU,CAAC;AAC9C,cAAI,KAAK,aAAa,aAAa,KAAK,MAAM;AAC1C,iBAAK,MAAM,GAAG;AAAA,UAClB;AACA,eAAK,eAAe;AACpB,eAAK,QAAQ,KAAK,KAAK,YAAY;AAAA,QACvC;AAEA,aAAK,YAAY,WAAW;AACxB,eAAK,MAAM,GAAG;AACd,iBAAO,MAAM,KAAK,IAAI;AAAA,QAC1B;AAEA,aAAK,WAAW,WAAW;AACvB,eAAK,eAAe,CAAC;AACrB,eAAK,aAAa,WAAW,IAAI;AACjC,eAAK,aAAa,OAAO,IAAI,KAAK,cAAc;AAChD,eAAK,QAAQ,KAAK,KAAK,YAAY;AAAA,QACvC;AAEA,aAAK,UAAU,WAAW;AACtB,eAAK,eAAe,CAAC;AACrB,eAAK,aAAa,WAAW,IAAI;AACjC,eAAK,aAAa,OAAO,IAAI,KAAK,cAAc;AAChD,eAAK,QAAQ,KAAK,KAAK,YAAY;AAAA,QACvC;AAEA,aAAK,QAAQ,SAAS,GAAG;AACrB,eAAK,WAAW,CAAC;AAAA,QACrB;AAEA,aAAK,wBAAwB,WAAY;AACrC,eAAK,QAAQ,QAAQ,SAAU,OAAO;AAClC,gBAAI,CAAC,MAAM,eAAe,MAAM,WAAW;AACvC,oBAAM,cAAc;AACpB,kBAAI,MAAM,UAAU,QAAQ;AACxB,sBAAM,eAAe,MAAM,UAAU,OAAO,MAAM,GAAG,EAAE,CAAC,KAAK;AAAA,cACjE;AACA,oBAAM,eAAe,MAAM,UAAU;AAAA,YACzC;AAAA,UACJ,CAAC;AAAA,QACL;AAEA,aAAK,SAAS,WAAW;AACrB,iBAAO,KAAK,QAAQ,GAAG;AACnB,gBAAI,IAAI,KAAK,UAAU;AACvB,iBAAK,MAAM,GAAG;AACd,gBAAI,EAAE,YAAY,KAAK,WAAW;AAC9B,mBAAK,OAAO;AAAA,YAChB,WAAW,EAAE,YAAY,KAAK,aAAa;AACvC,mBAAK,SAAS;AAAA,YAClB,WAAW,EAAE,YAAY,KAAK,YAAY;AACtC,mBAAK,QAAQ;AAAA,YACjB,OAAO;AACH,mBAAK,MAAM,CAAC;AAAA,YAChB;AACA,iBAAK,MAAM,GAAG;AAAA,UAClB;AAAC;AAED,eAAK,sBAAsB;AAAA,QAC/B;AAAA,MACJ;AAAC;AAED,MAAAD,SAAQ,SAAS,SAAS,QAAQ;AAC9B,YAAI,IAAI,IAAI,aAAa;AACzB,UAAE,SAAS,MAAM;AACjB,UAAE,OAAO;AACT,eAAO,EAAE;AAAA,MACb;AAGA,MAAAA,SAAQ,WAAW,SAAS,MAAM;AAC9B,YAAI,MAAM;AACV,iBAAU,KAAK,MAAM;AACjB,iBAAO,MAAM,KAAK,CAAC,EAAE;AACrB,iBAAO;AACP,cAAI,KAAK,CAAC,EAAE;AACR,mBAAO,KAAK,CAAC,EAAE,cAAc;AACjC,cAAI,KAAK,CAAC,EAAE;AACR,mBAAO,KAAK,CAAC,EAAE;AACnB,cAAI,KAAK,CAAC,EAAE,WAAW;AACnB,gBAAI,OAAO;AACX,qBAAS,OAAO,KAAK,CAAC,EAAE,WAAW;AAC/B,kBAAI,KAAK,UAAU;AACf,wBAAQ;AACZ,sBAAQ,MAAM,QAAQ,KAAK,CAAC,EAAE,UAAU,GAAG,IAAI;AAAA,YACnD;AACA,mBAAO;AAAA,UACX;AACA,iBAAO;AAAA,QACX;AACA,eAAO;AAAA,MAEX;AAAA,IAEJ,GAAG,OAAO,YAAY,cAAc,QAAK,aAAa,IAAI,CAAC,IAAI,OAAO;AAAA;AAAA;",
  "names": ["exports", "start"]
}
